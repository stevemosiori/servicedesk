# Generated by Django 3.2.4 on 2021-06-26 04:16

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Article',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('slug', models.CharField(blank=True, max_length=255, null=True)),
                ('content', models.TextField()),
                ('meta_description', models.CharField(blank=True, max_length=255, null=True)),
                ('keywords', models.CharField(blank=True, max_length=255, null=True)),
                ('viewed', models.IntegerField(blank=True, null=True)),
                ('status', models.IntegerField(blank=True, null=True)),
                ('date_added', models.DateTimeField()),
                ('date_updated', models.DateTimeField()),
                ('stared', models.IntegerField(blank=True, null=True)),
                ('meta_title', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'article',
            },
        ),
        migrations.CreateModel(
            name='ArticleCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('article_id', models.IntegerField()),
                ('category_id', models.IntegerField()),
            ],
            options={
                'db_table': 'article_category',
            },
        ),
        migrations.CreateModel(
            name='ArticleHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('article_id', models.IntegerField()),
                ('user_id', models.IntegerField()),
                ('content', models.TextField()),
                ('date_added', models.DateTimeField()),
            ],
            options={
                'db_table': 'article_history',
            },
        ),
        migrations.CreateModel(
            name='ArticleTags',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('article_id', models.IntegerField()),
                ('tag_id', models.IntegerField()),
            ],
            options={
                'db_table': 'article_tags',
            },
        ),
        migrations.CreateModel(
            name='MigrationVersions',
            fields=[
                ('version', models.CharField(max_length=14, primary_key=True, serialize=False)),
                ('executed_at', models.DateTimeField()),
            ],
            options={
                'db_table': 'migration_versions',
            },
        ),
        migrations.CreateModel(
            name='Recaptcha',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('site_key', models.CharField(blank=True, max_length=255, null=True)),
                ('secret_key', models.CharField(blank=True, max_length=255, null=True)),
                ('is_active', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'recaptcha',
            },
        ),
        migrations.CreateModel(
            name='RelatedArticles',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('article_id', models.IntegerField()),
                ('related_article_id', models.IntegerField()),
            ],
            options={
                'db_table': 'related_articles',
            },
        ),
        migrations.CreateModel(
            name='SolutionCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.CharField(blank=True, max_length=100, null=True)),
                ('sort_order', models.IntegerField(blank=True, null=True)),
                ('sorting', models.CharField(blank=True, max_length=255, null=True)),
                ('date_added', models.DateTimeField()),
                ('status', models.IntegerField(blank=True, null=True)),
                ('date_updated', models.DateTimeField()),
            ],
            options={
                'db_table': 'solution_category',
            },
        ),
        migrations.CreateModel(
            name='SolutionCategoryMapping',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('solution_id', models.IntegerField()),
                ('category_id', models.IntegerField()),
            ],
            options={
                'db_table': 'solution_category_mapping',
            },
        ),
        migrations.CreateModel(
            name='Solutions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.CharField(max_length=255)),
                ('visibility', models.CharField(max_length=255)),
                ('sort_order', models.IntegerField()),
                ('date_added', models.DateTimeField()),
                ('date_updated', models.DateTimeField()),
                ('solution_image', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'solutions',
            },
        ),
        migrations.CreateModel(
            name='SupportGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=191)),
                ('description', models.TextField()),
                ('created_at', models.DateTimeField()),
                ('is_active', models.IntegerField()),
                ('user_view', models.IntegerField()),
            ],
            options={
                'db_table': 'support_group',
            },
        ),
        migrations.CreateModel(
            name='SupportPrivilege',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=191)),
                ('description', models.TextField()),
                ('privileges', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'support_privilege',
            },
        ),
        migrations.CreateModel(
            name='SupportRole',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=191, unique=True)),
                ('description', models.CharField(blank=True, max_length=191, null=True)),
            ],
            options={
                'db_table': 'support_role',
            },
        ),
        migrations.CreateModel(
            name='SupportTeam',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=191)),
                ('description', models.TextField()),
                ('created_at', models.DateTimeField()),
                ('is_active', models.IntegerField()),
            ],
            options={
                'db_table': 'support_team',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'tag',
            },
        ),
        migrations.CreateModel(
            name='Thread',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source', models.CharField(max_length=191)),
                ('message_id', models.TextField(blank=True, null=True)),
                ('thread_type', models.CharField(max_length=191)),
                ('created_by', models.CharField(max_length=191)),
                ('cc', models.TextField(blank=True, null=True)),
                ('bcc', models.TextField(blank=True, null=True)),
                ('reply_to', models.TextField(blank=True, null=True)),
                ('delivery_status', models.CharField(blank=True, max_length=255, null=True)),
                ('is_locked', models.IntegerField()),
                ('is_bookmarked', models.IntegerField()),
                ('message', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('agent_viewed_at', models.DateTimeField(blank=True, null=True)),
                ('customer_viewed_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'thread',
            },
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source', models.CharField(max_length=191)),
                ('mailbox_email', models.CharField(blank=True, max_length=191, null=True)),
                ('subject', models.TextField(blank=True, null=True)),
                ('reference_ids', models.TextField(blank=True, null=True)),
                ('is_new', models.IntegerField()),
                ('is_replied', models.IntegerField()),
                ('is_reply_enabled', models.IntegerField()),
                ('is_starred', models.IntegerField()),
                ('is_trashed', models.IntegerField()),
                ('is_agent_viewed', models.IntegerField()),
                ('is_customer_viewed', models.IntegerField()),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
            ],
            options={
                'db_table': 'ticket',
            },
        ),
        migrations.CreateModel(
            name='TicketPriority',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=191, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('color_code', models.CharField(blank=True, max_length=191, null=True)),
            ],
            options={
                'db_table': 'ticket_priority',
            },
        ),
        migrations.CreateModel(
            name='TicketStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=191, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('color_code', models.CharField(blank=True, max_length=191, null=True)),
                ('sort_order', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'ticket_status',
            },
        ),
        migrations.CreateModel(
            name='TicketType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=191, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('is_active', models.IntegerField()),
            ],
            options={
                'db_table': 'ticket_type',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.CharField(blank=True, max_length=191, null=True, unique=True)),
                ('proxy_id', models.CharField(blank=True, max_length=191, null=True, unique=True)),
                ('password', models.CharField(blank=True, max_length=191, null=True)),
                ('first_name', models.CharField(max_length=191)),
                ('last_name', models.CharField(blank=True, max_length=191, null=True)),
                ('is_enabled', models.IntegerField()),
                ('verification_code', models.CharField(blank=True, max_length=191, null=True, unique=True)),
                ('timezone', models.CharField(blank=True, max_length=191, null=True)),
                ('timeformat', models.CharField(blank=True, max_length=191, null=True)),
            ],
            options={
                'db_table': 'users',
            },
        ),
        migrations.CreateModel(
            name='UserInstance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source', models.CharField(max_length=191)),
                ('skype_id', models.CharField(blank=True, max_length=191, null=True)),
                ('contact_number', models.CharField(blank=True, max_length=191, null=True)),
                ('designation', models.CharField(blank=True, max_length=191, null=True)),
                ('signature', models.TextField(blank=True, null=True)),
                ('profile_image_path', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('is_active', models.IntegerField()),
                ('is_verified', models.IntegerField()),
                ('is_starred', models.IntegerField()),
                ('ticket_access_level', models.CharField(blank=True, max_length=32, null=True)),
                ('supportrole', models.ForeignKey(blank=True, db_column='supportRole_id', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='sdapp.supportrole')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='sdapp.user')),
            ],
            options={
                'db_table': 'user_instance',
            },
        ),
        migrations.CreateModel(
            name='Website',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=191)),
                ('code', models.CharField(max_length=191, unique=True)),
                ('logo', models.CharField(blank=True, max_length=191, null=True)),
                ('theme_color', models.CharField(max_length=191)),
                ('favicon', models.CharField(blank=True, max_length=191, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('is_active', models.IntegerField(blank=True, null=True)),
                ('timezone', models.CharField(blank=True, max_length=191, null=True)),
                ('timeformat', models.CharField(blank=True, max_length=191, null=True)),
            ],
            options={
                'db_table': 'website',
            },
        ),
        migrations.CreateModel(
            name='Workflow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=191)),
                ('description', models.TextField(blank=True, null=True)),
                ('conditions', models.TextField()),
                ('actions', models.TextField()),
                ('sort_order', models.IntegerField(blank=True, null=True)),
                ('is_predefind', models.IntegerField()),
                ('status', models.IntegerField()),
                ('date_added', models.DateTimeField()),
                ('date_updated', models.DateTimeField()),
            ],
            options={
                'db_table': 'workflow',
            },
        ),
        migrations.CreateModel(
            name='WorkflowEvents',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_id', models.IntegerField()),
                ('event', models.CharField(max_length=191)),
                ('workflow', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='sdapp.workflow')),
            ],
            options={
                'db_table': 'workflow_events',
            },
        ),
        migrations.CreateModel(
            name='WebsiteKnowledgebase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(max_length=255)),
                ('brand_color', models.CharField(max_length=255)),
                ('page_background_color', models.CharField(max_length=255)),
                ('header_background_color', models.CharField(blank=True, max_length=255, null=True)),
                ('link_color', models.CharField(blank=True, max_length=255, null=True)),
                ('article_text_color', models.CharField(blank=True, max_length=255, null=True)),
                ('ticket_create_option', models.CharField(max_length=255)),
                ('site_description', models.CharField(blank=True, max_length=1000, null=True)),
                ('meta_description', models.CharField(blank=True, max_length=255, null=True)),
                ('meta_keywords', models.CharField(blank=True, max_length=255, null=True)),
                ('homepage_content', models.CharField(blank=True, max_length=255, null=True)),
                ('white_list', models.TextField(blank=True, null=True)),
                ('black_list', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('broadcast_message', models.TextField(blank=True, null=True)),
                ('disable_customer_login', models.IntegerField()),
                ('script', models.TextField(blank=True, null=True)),
                ('custom_css', models.TextField(blank=True, null=True)),
                ('is_active', models.IntegerField()),
                ('header_links', models.TextField(blank=True, null=True)),
                ('footer_links', models.TextField(blank=True, null=True)),
                ('banner_background_color', models.CharField(blank=True, max_length=255, null=True)),
                ('link_hover_color', models.CharField(blank=True, max_length=255, null=True)),
                ('login_required_to_create', models.IntegerField(blank=True, null=True)),
                ('remove_customer_login_button', models.IntegerField(blank=True, null=True)),
                ('remove_branding_content', models.IntegerField(blank=True, null=True)),
                ('website', models.ForeignKey(blank=True, db_column='website', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='sdapp.website')),
            ],
            options={
                'db_table': 'website_knowledgebase',
            },
        ),
        migrations.CreateModel(
            name='TicketRating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stars', models.IntegerField()),
                ('feedback', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('ticket', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='sdapp.ticket')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='sdapp.user')),
            ],
            options={
                'db_table': 'ticket_rating',
            },
        ),
        migrations.CreateModel(
            name='TicketAttachments',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(blank=True, null=True)),
                ('path', models.TextField(blank=True, null=True)),
                ('content_type', models.CharField(blank=True, max_length=255, null=True)),
                ('size', models.IntegerField(blank=True, null=True)),
                ('content_id', models.CharField(blank=True, max_length=255, null=True)),
                ('file_system', models.CharField(blank=True, max_length=255, null=True)),
                ('thread', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='sdapp.thread')),
            ],
            options={
                'db_table': 'ticket_attachments',
            },
        ),
        migrations.AddField(
            model_name='ticket',
            name='agent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='sdapp.user'),
        ),
        migrations.AddField(
            model_name='ticket',
            name='customer',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='ticket_user', to='sdapp.user'),
        ),
        migrations.AddField(
            model_name='ticket',
            name='group',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='sdapp.supportgroup'),
        ),
        migrations.AddField(
            model_name='ticket',
            name='priority',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='sdapp.ticketpriority'),
        ),
        migrations.AddField(
            model_name='ticket',
            name='status',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='sdapp.ticketstatus'),
        ),
        migrations.AddField(
            model_name='ticket',
            name='subgroup',
            field=models.ForeignKey(blank=True, db_column='subGroup_id', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='sdapp.supportteam'),
        ),
        migrations.AddField(
            model_name='ticket',
            name='type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='sdapp.tickettype'),
        ),
        migrations.AddField(
            model_name='thread',
            name='ticket',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='sdapp.ticket'),
        ),
        migrations.AddField(
            model_name='thread',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='sdapp.user'),
        ),
        migrations.CreateModel(
            name='SupportLabel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=191)),
                ('color_code', models.CharField(blank=True, max_length=191, null=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='sdapp.user')),
            ],
            options={
                'db_table': 'support_label',
            },
        ),
        migrations.CreateModel(
            name='SavedReplies',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('subject', models.CharField(blank=True, max_length=255, null=True)),
                ('message', models.TextField()),
                ('template_id', models.IntegerField(blank=True, null=True)),
                ('is_predefind', models.IntegerField(blank=True, null=True)),
                ('message_inline', models.TextField(blank=True, null=True)),
                ('template_for', models.CharField(blank=True, max_length=255, null=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='sdapp.userinstance')),
            ],
            options={
                'db_table': 'saved_replies',
            },
        ),
        migrations.CreateModel(
            name='SavedFilters',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=191)),
                ('filtering', models.TextField(blank=True, null=True)),
                ('route', models.CharField(blank=True, max_length=190, null=True)),
                ('date_added', models.DateTimeField()),
                ('date_updated', models.DateTimeField()),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='sdapp.userinstance')),
            ],
            options={
                'db_table': 'saved_filters',
            },
        ),
        migrations.CreateModel(
            name='PreparedResponses',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('type', models.CharField(blank=True, max_length=255, null=True)),
                ('actions', models.TextField()),
                ('status', models.IntegerField(blank=True, null=True)),
                ('date_added', models.DateTimeField()),
                ('date_updated', models.DateTimeField()),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='sdapp.userinstance')),
            ],
            options={
                'db_table': 'prepared_responses',
            },
        ),
        migrations.CreateModel(
            name='EmailTemplates',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=191)),
                ('subject', models.CharField(max_length=191)),
                ('message', models.TextField()),
                ('template_type', models.CharField(blank=True, max_length=255, null=True)),
                ('is_predefined', models.IntegerField()),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='sdapp.userinstance')),
            ],
            options={
                'db_table': 'email_templates',
            },
        ),
        migrations.CreateModel(
            name='ArticleViewLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('viewed_at', models.DateTimeField()),
                ('article', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='sdapp.article')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='sdapp.user')),
            ],
            options={
                'db_table': 'article_view_log',
            },
        ),
        migrations.CreateModel(
            name='ArticleFeedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_helpful', models.IntegerField()),
                ('description', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('article', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='sdapp.article')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='sdapp.user')),
            ],
            options={
                'db_table': 'article_feedback',
            },
        ),
        migrations.CreateModel(
            name='Announcement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('promo_text', models.CharField(max_length=255)),
                ('promo_tag', models.CharField(max_length=255)),
                ('tag_color', models.CharField(blank=True, max_length=255, null=True)),
                ('link_text', models.CharField(max_length=255)),
                ('link_url', models.CharField(max_length=255)),
                ('is_active', models.IntegerField()),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='sdapp.supportgroup')),
            ],
            options={
                'db_table': 'announcement',
            },
        ),
        migrations.CreateModel(
            name='AgentActivity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('agent_name', models.CharField(blank=True, max_length=255, null=True)),
                ('customer_name', models.CharField(blank=True, max_length=255, null=True)),
                ('thread_type', models.CharField(blank=True, max_length=255, null=True)),
                ('created_at', models.DateTimeField()),
                ('agent', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='sdapp.user')),
                ('ticket', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='sdapp.ticket')),
            ],
            options={
                'db_table': 'agent_activity',
            },
        ),
        migrations.CreateModel(
            name='UserSupportTeams',
            fields=[
                ('userinstanceid', models.OneToOneField(db_column='userInstanceId', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='sdapp.userinstance')),
                ('supportteamid', models.ForeignKey(db_column='supportTeamId', on_delete=django.db.models.deletion.DO_NOTHING, to='sdapp.supportteam')),
            ],
            options={
                'db_table': 'user_support_teams',
                'unique_together': {('userinstanceid', 'supportteamid')},
            },
        ),
        migrations.CreateModel(
            name='UserSupportPrivileges',
            fields=[
                ('userinstanceid', models.OneToOneField(db_column='userInstanceId', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='sdapp.userinstance')),
                ('supportprivilegeid', models.ForeignKey(db_column='supportPrivilegeId', on_delete=django.db.models.deletion.DO_NOTHING, to='sdapp.supportprivilege')),
            ],
            options={
                'db_table': 'user_support_privileges',
                'unique_together': {('userinstanceid', 'supportprivilegeid')},
            },
        ),
        migrations.CreateModel(
            name='UserSupportGroups',
            fields=[
                ('userinstanceid', models.OneToOneField(db_column='userInstanceId', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='sdapp.userinstance')),
                ('supportgroupid', models.ForeignKey(db_column='supportGroupId', on_delete=django.db.models.deletion.DO_NOTHING, to='sdapp.supportgroup')),
            ],
            options={
                'db_table': 'user_support_groups',
                'unique_together': {('userinstanceid', 'supportgroupid')},
            },
        ),
        migrations.CreateModel(
            name='TicketsTags',
            fields=[
                ('ticket', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='sdapp.ticket')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='sdapp.tag')),
            ],
            options={
                'db_table': 'tickets_tags',
                'unique_together': {('ticket', 'tag')},
            },
        ),
        migrations.CreateModel(
            name='TicketsLabels',
            fields=[
                ('ticket', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='sdapp.ticket')),
                ('label', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='sdapp.supportlabel')),
            ],
            options={
                'db_table': 'tickets_labels',
                'unique_together': {('ticket', 'label')},
            },
        ),
        migrations.CreateModel(
            name='TicketsCollaborators',
            fields=[
                ('ticket', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='sdapp.ticket')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='sdapp.user')),
            ],
            options={
                'db_table': 'tickets_collaborators',
                'unique_together': {('ticket', 'user')},
            },
        ),
        migrations.CreateModel(
            name='SupportGroupsTeams',
            fields=[
                ('supportgroup', models.OneToOneField(db_column='supportGroup_id', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='sdapp.supportgroup')),
                ('supportteam', models.ForeignKey(db_column='supportTeam_id', on_delete=django.db.models.deletion.DO_NOTHING, to='sdapp.supportteam')),
            ],
            options={
                'db_table': 'support_groups_teams',
                'unique_together': {('supportgroup', 'supportteam')},
            },
        ),
        migrations.CreateModel(
            name='SavedRepliesTeams',
            fields=[
                ('savedreply', models.OneToOneField(db_column='savedReply_id', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='sdapp.savedreplies')),
                ('subgroup', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='sdapp.supportteam')),
            ],
            options={
                'db_table': 'saved_replies_teams',
                'unique_together': {('savedreply', 'subgroup')},
            },
        ),
        migrations.CreateModel(
            name='SavedRepliesGroups',
            fields=[
                ('savedreply', models.OneToOneField(db_column='savedReply_id', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='sdapp.savedreplies')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='sdapp.supportgroup')),
            ],
            options={
                'db_table': 'saved_replies_groups',
                'unique_together': {('savedreply', 'group')},
            },
        ),
        migrations.CreateModel(
            name='PreparedResponseSupportTeams',
            fields=[
                ('savedreply', models.OneToOneField(db_column='savedReply_id', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='sdapp.preparedresponses')),
                ('subgroup', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='sdapp.supportteam')),
            ],
            options={
                'db_table': 'prepared_response_support_teams',
                'unique_together': {('savedreply', 'subgroup')},
            },
        ),
        migrations.CreateModel(
            name='PreparedResponseSupportGroups',
            fields=[
                ('savedreply', models.OneToOneField(db_column='savedReply_id', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='sdapp.preparedresponses')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='sdapp.supportgroup')),
            ],
            options={
                'db_table': 'prepared_response_support_groups',
                'unique_together': {('savedreply', 'group')},
            },
        ),
        migrations.CreateModel(
            name='LeadSupportTeams',
            fields=[
                ('leaduserinstanceid', models.OneToOneField(db_column='leadUserInstanceId', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='sdapp.userinstance')),
                ('supportteamid', models.ForeignKey(db_column='supportTeamId', on_delete=django.db.models.deletion.DO_NOTHING, to='sdapp.supportteam')),
            ],
            options={
                'db_table': 'lead_support_teams',
                'unique_together': {('leaduserinstanceid', 'supportteamid')},
            },
        ),
        migrations.CreateModel(
            name='AdminSupportGroups',
            fields=[
                ('adminuserinstanceid', models.OneToOneField(db_column='adminUserInstanceId', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='sdapp.userinstance')),
                ('supportgroupid', models.ForeignKey(db_column='supportGroupId', on_delete=django.db.models.deletion.DO_NOTHING, to='sdapp.supportgroup')),
            ],
            options={
                'db_table': 'admin_support_groups',
                'unique_together': {('adminuserinstanceid', 'supportgroupid')},
            },
        ),
    ]
